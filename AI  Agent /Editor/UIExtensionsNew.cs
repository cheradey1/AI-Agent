using UnityEngine;
using UnityEditor;
using System;
using System.Collections.Generic;
using UnityEngine.Networking;
using UnityEditor.SceneManagement;
using UnityEngine.SceneManagement;
using System.IO;

namespace UnityAIAgent
{
    /// <summary>
    /// –ú–µ—Ç–æ–¥–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è AIAgentUnity —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    /// </summary>
    public static class UIExtensionsNew
    {
        /// <summary>
        /// –ú–∞–ª—é—î –ø–∞–Ω–µ–ª—å —ñ–≥—Ä–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –±–∞–∑–æ–≤–∏—Ö —Å—Ü–µ–Ω
        /// </summary>
        public static void DrawGameParametersPanel(Rect panelRect, ref GameType gameType, ref PlayerCount playerCount, 
            ref ArtStyle artStyle, ref MapSize mapSize, ref string gameGoal, ref Vector2 scrollPosition, AIAgentUnity window)
        {
            GUILayout.BeginArea(panelRect);
            EditorGUILayout.LabelField("üéÆ –Ü–≥—Ä–æ–≤—ñ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏", EditorStyles.boldLabel);
            
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);
            
            EditorGUILayout.BeginVertical("box");
            
            EditorGUILayout.LabelField("–û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥—Ä–∏", EditorStyles.boldLabel);
            
            gameType = (GameType)EditorGUILayout.EnumPopup("–¢–∏–ø –≥—Ä–∏:", gameType);
            playerCount = (PlayerCount)EditorGUILayout.EnumPopup("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤:", playerCount);
            artStyle = (ArtStyle)EditorGUILayout.EnumPopup("–•—É–¥–æ–∂–Ω—ñ–π —Å—Ç–∏–ª—å:", artStyle);
            mapSize = (MapSize)EditorGUILayout.EnumPopup("–†–æ–∑–º—ñ—Ä –∫–∞—Ä—Ç–∏:", mapSize);
            
            EditorGUILayout.LabelField("–¶—ñ–ª—å –≥—Ä–∏:");
            gameGoal = EditorGUILayout.TextArea(gameGoal, GUILayout.Height(60));
            
            EditorGUILayout.EndVertical();
            
            EditorGUILayout.BeginVertical("box");
            EditorGUILayout.LabelField("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è:", EditorStyles.boldLabel);
            
            if (GUILayout.Button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø", GUILayout.Height(30)))
            {
                if (window != null)
                {
                    window.GenerateGame();
                }
                else
                {
                    Debug.LogError("–í—ñ–∫–Ω–æ AIAgentUnity –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }
            }
            
            // –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ü–µ–Ω–∏
            EditorGUILayout.Space(5);
            GUI.backgroundColor = new Color(0.3f, 0.8f, 0.3f); // –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
            if (GUILayout.Button("üîß –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤—É —Å—Ü–µ–Ω—É", GUILayout.Height(30)))
            {
                if (window != null)
                {
                    window.GenerateBasicScene();
                }
                else
                {
                    Debug.LogError("–í—ñ–∫–Ω–æ AIAgentUnity –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }
            }
            GUI.backgroundColor = Color.white; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Asset Store –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É –∑–∞ —Ç–∏–ø–æ–º –≥—Ä–∏
            EditorGUILayout.Space(5);
            GUI.backgroundColor = new Color(0.3f, 0.6f, 0.9f); // –°–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
            if (GUILayout.Button("üîç –ó–Ω–∞–π—Ç–∏ –∞—Å—Å–µ—Ç–∏ –∑–∞ —Ç–∏–ø–æ–º –≥—Ä–∏", GUILayout.Height(30)))
            {
                if (window != null)
                {
                    window.SearchAssetsForGameType();
                }
                else
                {
                    Debug.LogError("–í—ñ–∫–Ω–æ AIAgentUnity –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }
            }
            GUI.backgroundColor = Color.white; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
            
            EditorGUILayout.EndVertical();
            
            EditorGUILayout.EndScrollView();
            GUILayout.EndArea();
        }
    }
    
    /// <summary>
    /// –ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ AIAgentUnity
    /// </summary>
    public static class AIAgentExtensions
    {
        /// <summary>
        /// –ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤—É —Å—Ü–µ–Ω—É
        /// </summary>
        public static void GenerateBasicScene(this AIAgentUnity agentWindow)
        {
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –≤—ñ–∫–Ω–∞ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
            var gameTypeField = typeof(AIAgentUnity).GetField("_selectedGameType", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var artStyleField = typeof(AIAgentUnity).GetField("_selectedArtStyle", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var gameGoalField = typeof(AIAgentUnity).GetField("_gameGoal", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var chatHistoryField = typeof(AIAgentUnity).GetField("_chatHistory", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (gameTypeField == null || artStyleField == null || gameGoalField == null || chatHistoryField == null)
            {
                Debug.LogError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—ñ–≤ AIAgentUnity");
                return;
            }
            
            var gameType = (GameType)gameTypeField.GetValue(agentWindow);
            var artStyle = (ArtStyle)artStyleField.GetValue(agentWindow);
            var gameGoal = (string)gameGoalField.GetValue(agentWindow);
            var chatHistory = (List<ChatMessage>)chatHistoryField.GetValue(agentWindow);
            
            try
            {
                chatHistory.Add(new ChatMessage("System", $"–ì–µ–Ω–µ—Ä—É—é –±–∞–∑–æ–≤—É {gameType} —Å—Ü–µ–Ω—É –≤ —Å—Ç–∏–ª—ñ {artStyle}..."));
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ü–µ–Ω—É –∑ –±–∞–∑–æ–≤–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏
                var newScene = EditorSceneManager.NewScene(NewSceneSetup.DefaultGameObjects, NewSceneMode.Single);

                // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–µ–º–ª—é
                GameObject ground = GameObject.CreatePrimitive(PrimitiveType.Cube);
                ground.transform.localScale = new Vector3(10, 1, 10);
                ground.transform.position = Vector3.zero;
                ground.name = "Ground";
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è
                GameObject player = GameObject.CreatePrimitive(PrimitiveType.Capsule);
                player.transform.position = new Vector3(0, 2, 0);
                player.transform.localScale = new Vector3(1, 1, 1);
                player.name = "Player";

                // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞–º–µ—Ä—É
                Camera cam = Camera.main;
                if (cam == null)
                {
                    GameObject camObj = new GameObject("Main Camera");
                    cam = camObj.AddComponent<Camera>();
                    cam.tag = "MainCamera";
                }
                cam.transform.position = new Vector3(0, 5, -10);
                cam.transform.LookAt(player.transform);

                // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä–∏–ø—Ç —Ä—É—Ö—É –≥—Ä–∞–≤—Ü—è
                string scriptContent = @"using UnityEngine;
public class PlayerMovement : MonoBehaviour {
    public float speed = 5f;
    public float jumpForce = 5f;
    private bool isGrounded;
    private Rigidbody rb;
    
    void Start() {
        rb = GetComponent<Rigidbody>();
        if (rb == null) {
            rb = gameObject.AddComponent<Rigidbody>();
            rb.constraints = RigidbodyConstraints.FreezeRotation;
        }
    }
    
    void Update() {
        float h = Input.GetAxis(""Horizontal"");
        float v = Input.GetAxis(""Vertical"");
        transform.Translate(new Vector3(h, 0, v) * speed * Time.deltaTime);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–Ω—è
        isGrounded = Physics.Raycast(transform.position, Vector3.down, 1.1f);
        
        // –°—Ç—Ä–∏–±–æ–∫
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded) {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        }
    }
}";

                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
                string folderPath = "Assets/Scripts";
                if (!AssetDatabase.IsValidFolder(folderPath))
                {
                    AssetDatabase.CreateFolder("Assets", "Scripts");
                }
                
                string scriptPath = $"{folderPath}/PlayerMovement.cs";
                File.WriteAllText(scriptPath, scriptContent);
                AssetDatabase.ImportAsset(scriptPath);
                AssetDatabase.Refresh();

                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ –¥–ª—è —Å—Ü–µ–Ω, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
                string scenesFolderPath = "Assets/Scenes";
                if (!AssetDatabase.IsValidFolder(scenesFolderPath))
                {
                    AssetDatabase.CreateFolder("Assets", "Scenes");
                }
                
                // –î–æ–¥–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ –≥—Ä–∞–≤—Ü—è –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É —Å–∫—Ä–∏–ø—Ç—É
                EditorApplication.delayCall += () => {
                    var playerMovementType = System.Type.GetType("PlayerMovement, Assembly-CSharp");
                    if (playerMovementType != null) {
                        player.AddComponent(playerMovementType);
                        
                        // –î–æ–¥–∞—î–º–æ Rigidbody, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
                        if (player.GetComponent<Rigidbody>() == null)
                        {
                            Rigidbody rb = player.AddComponent<Rigidbody>();
                            rb.constraints = RigidbodyConstraints.FreezeRotation;
                        }
                    } else {
                        Debug.LogError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∏–ø PlayerMovement");
                    }
                };
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ü–µ–Ω—É
                string sceneName = $"{gameType}_{artStyle}";
                if (!string.IsNullOrEmpty(gameGoal))
                {
                    sceneName += $"_{System.IO.Path.GetFileNameWithoutExtension(gameGoal.Replace(" ", "_"))}";
                }
                string sanitizedSceneName = string.Join("_", sceneName.Split(System.IO.Path.GetInvalidFileNameChars()));
                string scenePath = $"{scenesFolderPath}/{sanitizedSceneName}.unity";
                EditorSceneManager.SaveScene(SceneManager.GetActiveScene(), scenePath);
                
                chatHistory.Add(new ChatMessage("System", $"‚úÖ –°—Ü–µ–Ω—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é {scenePath}"));
                chatHistory.Add(new ChatMessage("System", $"‚úÖ –î–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ —É Asset Store, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–Ω–∞–π—Ç–∏ –∞—Å—Å–µ—Ç–∏ –∑–∞ —Ç–∏–ø–æ–º –≥—Ä–∏'"));
                
                string assetStoreSearchUrl = $"https://assetstore.unity.com/search?q={UnityWebRequest.EscapeURL(gameType.ToString())}+{UnityWebRequest.EscapeURL(artStyle.ToString())}";
                chatHistory.Add(new ChatMessage("System", $"[–í—ñ–¥–∫—Ä–∏—Ç–∏ Asset Store]({assetStoreSearchUrl})"));
                
                agentWindow.Repaint();
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ü–µ–Ω–∏: {ex.Message}");
                chatHistory.Add(new ChatMessage("System", $"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ü–µ–Ω–∏: {ex.Message}"));
                agentWindow.Repaint();
            }
        }
        
        /// <summary>
        /// –í—ñ–¥–∫—Ä–∏–≤–∞—î Asset Store –∑ –ø–æ—à—É–∫–æ–º –∑–∞ —Ç–∏–ø–æ–º –≥—Ä–∏
        /// </summary>
        public static void SearchAssetsForGameType(this AIAgentUnity agentWindow)
        {
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –≤—ñ–∫–Ω–∞ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
            var gameTypeField = typeof(AIAgentUnity).GetField("_selectedGameType", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var artStyleField = typeof(AIAgentUnity).GetField("_selectedArtStyle", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var chatHistoryField = typeof(AIAgentUnity).GetField("_chatHistory", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (gameTypeField == null || artStyleField == null || chatHistoryField == null)
            {
                Debug.LogError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—ñ–≤ AIAgentUnity");
                return;
            }
            
            var gameType = (GameType)gameTypeField.GetValue(agentWindow);
            var artStyle = (ArtStyle)artStyleField.GetValue(agentWindow);
            var chatHistory = (List<ChatMessage>)chatHistoryField.GetValue(agentWindow);
            
            try
            {
                chatHistory.Add(new ChatMessage("System", $"–í—ñ–¥–∫—Ä–∏–≤–∞—é Asset Store –¥–ª—è –ø–æ—à—É–∫—É —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑–∞ —Ç–∏–ø–æ–º: {gameType} —Ç–∞ —Å—Ç–∏–ª–µ–º: {artStyle}"));
                
                // –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –ø–æ—à—É–∫—É –≤ Asset Store
                string assetStoreSearchUrl = $"https://assetstore.unity.com/search?q={UnityWebRequest.EscapeURL(gameType.ToString())}+{UnityWebRequest.EscapeURL(artStyle.ToString())}";
                Application.OpenURL(assetStoreSearchUrl);
                
                agentWindow.Repaint();
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Asset Store: {ex.Message}");
                chatHistory.Add(new ChatMessage("System", $"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Asset Store: {ex.Message}"));
                agentWindow.Repaint();
            }
        }
        
        /// <summary>
        /// –ì–µ–Ω–µ—Ä—É—î –≥—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        /// </summary>
        public static void GenerateGame(this AIAgentUnity agentWindow)
        {
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –≤—ñ–∫–Ω–∞ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
            var gameTypeField = typeof(AIAgentUnity).GetField("_selectedGameType", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var playerCountField = typeof(AIAgentUnity).GetField("_selectedPlayerCount", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var artStyleField = typeof(AIAgentUnity).GetField("_selectedArtStyle", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var mapSizeField = typeof(AIAgentUnity).GetField("_selectedMapSize", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var gameGoalField = typeof(AIAgentUnity).GetField("_gameGoal", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var chatHistoryField = typeof(AIAgentUnity).GetField("_chatHistory", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (gameTypeField == null || playerCountField == null || artStyleField == null || 
                mapSizeField == null || gameGoalField == null || chatHistoryField == null)
            {
                Debug.LogError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—ñ–≤ AIAgentUnity");
                return;
            }
            
            var gameType = (GameType)gameTypeField.GetValue(agentWindow);
            var playerCount = (PlayerCount)playerCountField.GetValue(agentWindow);
            var artStyle = (ArtStyle)artStyleField.GetValue(agentWindow);
            var mapSize = (MapSize)mapSizeField.GetValue(agentWindow);
            var gameGoal = (string)gameGoalField.GetValue(agentWindow);
            var chatHistory = (List<ChatMessage>)chatHistoryField.GetValue(agentWindow);
            
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ SendMessageToAI —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å—ñ—é
            var sendMessageMethod = typeof(AIAgentUnity).GetMethod("SendMessageToAI", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (sendMessageMethod == null)
            {
                Debug.LogError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ SendMessageToAI");
                return;
            }
            
            // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≥—Ä–∏
            string prompt = $"–°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è Unity –≥—Ä–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n" +
                $"- –¢–∏–ø –≥—Ä–∏: {gameType}\n" +
                $"- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: {playerCount}\n" +
                $"- –°—Ç–∏–ª—å: {artStyle}\n" +
                $"- –†–æ–∑–º—ñ—Ä –∫–∞—Ä—Ç–∏: {mapSize}\n" +
                $"- –ú–µ—Ç–∞ –≥—Ä–∏: {gameGoal}\n\n" +
                "–ü–æ—Ç—Ä—ñ–±–Ω–æ: –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π –æ–ø–∏—Å –≥—Ä–∏, –≥–æ–ª–æ–≤–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –≥—Ä–∞–≤—Ü—è, —ñ–≥—Ä–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏, " +
                "–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä—ñ–≤–Ω—ñ–≤ —Ç–∞ –∫–æ—Ä–æ—Ç–∫—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ü–µ–Ω–∏. " +
                "–£—Å—ñ —Å–∫—Ä–∏–ø—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–∞ –°# –∑ –ø–æ–≤–Ω–∏–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.";
            
            // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
            chatHistory.Add(new ChatMessage("System", "–ü–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≥—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤..."));
            
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ SendMessageToAI
            sendMessageMethod.Invoke(agentWindow, new object[] { prompt, false });
        }
    }
}
