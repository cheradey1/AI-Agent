// –ù–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è UIChanges.cs
// –¶—ñ –º–µ—Ç–æ–¥–∏ –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –≤ AIAgentUnity.cs

using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using System;

namespace UnityAIAgent 
{
    // –¶–µ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –Ω–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    public static class UIExtensions 
    {
        // –°—Ç–∞—Ç–∏—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É
        private static StringValue s_SelectedExample;
        private static bool s_NeedsRefresh;
        
        /// <summary>
        /// –ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API —Å—Ç–∞—Ç—É—Å —Ç–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–º—ñ—Å—Ç—å –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É –∫–ª—é—á—ñ–≤)
        /// </summary>
        public static void DrawApiKeysPanel(Rect panelRect, AIAgentSettings settings, SerializedObject serializedSettings, 
            ref string apiKeyInput, ref List<ChatMessage> chatHistory, IAIService currentService, AIServiceFactory serviceFactory)
        {
            GUILayout.BeginArea(panelRect);
            EditorGUILayout.LabelField("üîë –°–µ—Ä–≤—ñ—Å AI", EditorStyles.boldLabel);

            // –í–∏–±—ñ—Ä AI —Å–µ—Ä–≤—ñ—Å—É
            string[] serviceOptions = {"Auto (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)", "OpenAI", "Anthropic Claude", "Google Gemini", "Ollama (–ª–æ–∫–∞–ª—å–Ω–æ)"};
            int selectedService = System.Array.IndexOf(serviceOptions, currentService?.GetServiceName() ?? "Auto (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)");
            selectedService = EditorGUILayout.Popup("AI –°–µ—Ä–≤—ñ—Å:", selectedService >= 0 ? selectedService : 0, serviceOptions);

            EditorGUILayout.BeginVertical("box");
            
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
            string serviceStatus = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∏–π";
            Color statusColor = Color.red;
            
            if (currentService != null)
            {
                if (currentService.IsConfigured())
                {
                    serviceStatus = $"–ê–∫—Ç–∏–≤–Ω–∏–π: {currentService.GetServiceName()}";
                    statusColor = Color.green;
                }
                else
                {
                    serviceStatus = $"–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π: {currentService.GetServiceName()}";
                    statusColor = Color.yellow;
                }
            }
            
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—é—á—ñ
            GUIStyle statusStyle = new GUIStyle(EditorStyles.boldLabel);
            statusStyle.normal.textColor = statusColor;
            EditorGUILayout.LabelField($"–°—Ç–∞—Ç—É—Å AI: {serviceStatus}", statusStyle);
            
            if (settings?.openAIApiKey?.Length > 0)
                EditorGUILayout.LabelField("‚úì OpenAI API –∫–ª—é—á: –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
            else
                EditorGUILayout.LabelField("‚úó OpenAI API –∫–ª—é—á: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
                
            if (settings?.anthropicApiKey?.Length > 0)
                EditorGUILayout.LabelField("‚úì Claude API –∫–ª—é—á: –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
            else
                EditorGUILayout.LabelField("‚úó Claude API –∫–ª—é—á: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
                
            if (settings?.geminiApiKey?.Length > 0)
                EditorGUILayout.LabelField("‚úì Gemini API –∫–ª—é—á: –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
            else
                EditorGUILayout.LabelField("‚úó Gemini API –∫–ª—é—á: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
            
            EditorGUILayout.EndVertical();
            
            GUILayout.Space(10);
            
            if (GUILayout.Button("‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", GUILayout.Height(30)))
            {
                // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –∑ –ø–æ–≤–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
                AIAgentSettingsWindow.ShowWindow();
            }
            
            GUILayout.EndArea();
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î –ø–∞–Ω–µ–ª—å Asset Store / Marketplace (—Å–µ—Ä–µ–¥–Ω—è –ª—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞)
        /// </summary>
        public static void DrawAssetStorePanel(Rect panelRect, ref string assetSearchQuery, ref List<string> assetSearchResults, ref Vector2 scrollPosition)
        {
            GUILayout.BeginArea(panelRect);
            EditorGUILayout.LabelField("üõí Asset Store / Marketplace", EditorStyles.boldLabel);
            
            // –ü–æ–ª–µ –ø–æ—à—É–∫—É –∞—Å—Å–µ—Ç—ñ–≤
            EditorGUILayout.BeginHorizontal();
            assetSearchQuery = EditorGUILayout.TextField(assetSearchQuery);
            if (GUILayout.Button("–ü–æ—à—É–∫", GUILayout.Width(70)))
            {
                // –¢—É—Ç –∫–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –≤ Asset Store
                assetSearchResults.Clear();
                assetSearchResults.Add("‚ö†Ô∏è –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Asset Store –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ");
                assetSearchResults.Add("‚ö†Ô∏è –¢—É—Ç –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º: " + assetSearchQuery);
                assetSearchResults.Add("‚ö†Ô∏è –î–æ–¥–∞–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó UI");
            }
            EditorGUILayout.EndHorizontal();
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);
            if (assetSearchResults.Count > 0)
            {
                EditorGUILayout.BeginVertical("box");
                foreach (var result in assetSearchResults)
                {
                    EditorGUILayout.LabelField(result, EditorStyles.wordWrappedLabel);
                }
                EditorGUILayout.EndVertical();
            } 
            else 
            {
                EditorGUILayout.HelpBox("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –≤ Asset Store", MessageType.Info);
            }
            EditorGUILayout.EndScrollView();
            
            GUILayout.EndArea();
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î –ø–∞–Ω–µ–ª—å GitHub (—Å–µ—Ä–µ–¥–Ω—è –ø—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞)
        /// </summary>
        public static void DrawGitHubPanel(Rect panelRect, ref string githubSearchQuery, ref string githubRepoUrl, ref List<string> githubSearchResults, ref Vector2 scrollPosition)
        {
            GUILayout.BeginArea(panelRect);
            EditorGUILayout.LabelField("üìÇ GitHub –ü–æ—à—É–∫", EditorStyles.boldLabel);
            
            // –ü–æ–ª—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ GitHub
            EditorGUILayout.BeginVertical("box");
            
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.PrefixLabel("–ü–æ—à—É–∫:");
            githubSearchQuery = EditorGUILayout.TextField(githubSearchQuery);
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.PrefixLabel("–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:");
            githubRepoUrl = EditorGUILayout.TextField(githubRepoUrl);
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.EndVertical();
            
            if (GUILayout.Button("–ü–æ—à—É–∫ –Ω–∞ GitHub", GUILayout.Height(25)))
            {
                // –¢—É—Ç –∫–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ GitHub
                githubSearchResults.Clear();
                githubSearchResults.Add("‚ö†Ô∏è –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ GitHub –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ");
                githubSearchResults.Add($"‚ö†Ô∏è –ü–æ—à—É–∫ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{githubSearchQuery}' —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó: {githubRepoUrl}");
                githubSearchResults.Add("‚ö†Ô∏è –î–æ–¥–∞–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó UI");
            }
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –Ω–∞ GitHub
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);
            if (githubSearchResults.Count > 0)
            {
                EditorGUILayout.BeginVertical("box");
                foreach (var result in githubSearchResults)
                {
                    EditorGUILayout.LabelField(result, EditorStyles.wordWrappedLabel);
                    GUILayout.Space(5);
                }
                EditorGUILayout.EndVertical();
            }
            else 
            {
                EditorGUILayout.HelpBox("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ GitHub", MessageType.Info);
            }
            EditorGUILayout.EndScrollView();
            
            GUILayout.EndArea();
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î –ø–∞–Ω–µ–ª—å —á–∞—Ç—É –∑ –≥–æ–ª–æ—Å–æ–≤–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º (–Ω–∏–∂–Ω—è —á–∞—Å—Ç–∏–Ω–∞)
        /// </summary>
        public static void DrawEnhancedChatPanel(Rect panelRect, ref string userInput, ref Vector2 scrollPosition, 
            ref List<ChatMessage> chatHistory, ref bool isWaitingForAIResponse, ref bool isSpeechToTextActive, ref bool isTextToSpeechEnabled, 
            System.Action<string, bool> sendMessageAction, System.Action clearChatAction)
        {
            GUILayout.BeginArea(panelRect);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("üí¨ –ß–∞—Ç", EditorStyles.boldLabel, GUILayout.ExpandWidth(true));
            
            GUI.backgroundColor = isTextToSpeechEnabled ? Color.green : Color.white;
            if (GUILayout.Button("üîä TTS " + (isTextToSpeechEnabled ? "ON" : "OFF"), GUILayout.Width(80)))
            {
                isTextToSpeechEnabled = !isTextToSpeechEnabled;
                chatHistory.Add(new ChatMessage("System", $"–û–∑–≤—É—á—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π {(isTextToSpeechEnabled ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}"));
            }
            GUI.backgroundColor = Color.white;
            EditorGUILayout.EndHorizontal();
            
            // –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.ExpandHeight(true));
            EditorGUILayout.BeginVertical("box");
            
            foreach (var message in chatHistory)
            {
                GUIStyle messageStyle = new GUIStyle(EditorStyles.wordWrappedLabel);
                messageStyle.richText = true;
                
                string prefix;
                
                if (message.Sender.ToLower() == "user")
                {
                    GUI.backgroundColor = new Color(0.8f, 0.9f, 1f); // –°–≤—ñ—Ç–ª–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    prefix = "<b>üë§ –í–∏:</b> ";
                }
                else if (message.Sender.ToLower() == "ai" || message.Sender.ToLower() == "assistant")
                {
                    GUI.backgroundColor = new Color(0.9f, 1f, 0.9f); // –°–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è AI
                    prefix = "<b>ü§ñ AI:</b> ";
                }
                else
                {
                    GUI.backgroundColor = new Color(0.95f, 0.95f, 0.95f); // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    prefix = "<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b> ";
                }
                
                EditorGUILayout.BeginVertical("box");
                EditorGUILayout.LabelField(prefix + message.Text, messageStyle);
                EditorGUILayout.EndVertical();
                
                GUI.backgroundColor = Color.white; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–ª—ñ—Ä
            }
            
            EditorGUILayout.EndVertical();
            EditorGUILayout.EndScrollView();
            
            // –ü–æ–ª–µ –≤–≤–æ–¥—É —ñ –∫–Ω–æ–ø–∫–∏
            EditorGUILayout.BeginHorizontal();
            
            // –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥—É
            GUI.backgroundColor = isSpeechToTextActive ? Color.red : Color.white;
            if (GUILayout.Button(isSpeechToTextActive ? "üéôÔ∏è ‚èπÔ∏è" : "üéôÔ∏è", GUILayout.Width(40), GUILayout.Height(40)))
            {
                isSpeechToTextActive = !isSpeechToTextActive;
                if (isSpeechToTextActive)
                {
                    chatHistory.Add(new ChatMessage("System", "–ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ì–æ–≤–æ—Ä—ñ—Ç—å..."));
                    // –¢—É—Ç –±—É–¥–µ –∫–æ–¥ –¥–ª—è Speech-to-Text —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
                }
                else
                {
                    chatHistory.Add(new ChatMessage("System", "–ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∑—É–ø–∏–Ω–µ–Ω–æ"));
                }
            }
            GUI.backgroundColor = Color.white;
            
            // –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É
            GUIStyle textAreaStyle = new GUIStyle(EditorStyles.textArea);
            textAreaStyle.fontSize = 14; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
            textAreaStyle.normal.textColor = EditorGUIUtility.isProSkin ? Color.white : Color.black;
            
            GUI.SetNextControlName("UserInputTextField");
            string newInput = EditorGUILayout.TextArea(userInput, textAreaStyle, GUILayout.Height(40));
            if (newInput != userInput)
            {
                userInput = newInput;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ –ø—Ä–∏–∫–ª–∞–¥
            if (s_NeedsRefresh && s_SelectedExample != null)
            {
                userInput = s_SelectedExample.Value;
                s_SelectedExample = null;
                s_NeedsRefresh = false;
            }
            
            // –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            EditorGUI.BeginDisabledGroup(isWaitingForAIResponse || string.IsNullOrWhiteSpace(userInput));
            if (GUILayout.Button("‚úâÔ∏è", GUILayout.Width(40), GUILayout.Height(40)) && !string.IsNullOrEmpty(userInput))
            {
                sendMessageAction?.Invoke(userInput, false);
                userInput = "";
            }
            EditorGUI.EndDisabledGroup();
            
            EditorGUILayout.EndHorizontal();
            
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏"))
            {
                // –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if (chatHistory.LastOrDefault(m => m.Sender == "User").Text != null)
                {
                    sendMessageAction?.Invoke(chatHistory.Last(m => m.Sender == "User").Text, true);
                }
            }
            if (GUILayout.Button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç"))
            {
                clearChatAction?.Invoke();
            }
            if (GUILayout.Button("üìù –ü—Ä–∏–∫–ª–∞–¥–∏") && !isWaitingForAIResponse)
            {
                // –ú–µ–Ω—é –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∑–∞–ø–∏—Ç—ñ–≤
                GenericMenu menu = new GenericMenu();
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤
                string seaBattleExample = "–°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤—É —Å—Ü–µ–Ω—É –≥—Ä–∏ –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π –∑ 3D –æ–±'—î–∫—Ç–∞–º–∏ —Ç–∞ –ø—Ä–æ—Å—Ç–∏–º –º–µ–Ω—é";
                string characterControllerExample = "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –¥–ª—è –≥—Ä–∞–≤—Ü—è –≤ —Å—Ç–∏–ª—ñ FPS –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å—Ç—Ä–∏–±–∫—ñ–≤ —ñ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è";
                string inventoryExample = "–°—Ç–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—É —Å–∏—Å—Ç–µ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –∑ UI –¥–ª—è —Ä–æ–ª—å–æ–≤–æ—ó –≥—Ä–∏";
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –≤—ñ–∫–Ω–∞
                EditorWindow currentWindow = EditorWindow.focusedWindow;
                
                // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤ –º–µ–Ω—é
                menu.AddItem(new GUIContent("–°—Ç–≤–æ—Ä–∏ —Å—Ü–µ–Ω—É –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π"), false, () => {
                    // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏–∫–ª–∞–¥—É –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —á–µ—Ä–µ–∑ s_SelectedExample
                    s_SelectedExample = new StringValue(seaBattleExample);
                    s_NeedsRefresh = true;
                    currentWindow.Repaint();
                });
                menu.AddItem(new GUIContent("–ó–≥–µ–Ω–µ—Ä—É–π —Å–∫—Ä–∏–ø—Ç —Ä—É—Ö—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"), false, () => {
                    s_SelectedExample = new StringValue(characterControllerExample);
                    s_NeedsRefresh = true;
                    currentWindow.Repaint();
                });
                menu.AddItem(new GUIContent("–°—Ç–≤–æ—Ä–∏ —Å–∏—Å—Ç–µ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é"), false, () => {
                    s_SelectedExample = new StringValue(inventoryExample);
                    s_NeedsRefresh = true;
                    currentWindow.Repaint();
                });
                menu.ShowAsContext();
            }
            EditorGUILayout.EndHorizontal();
            
            // –†—è–¥–æ–∫ —Å—Ç–∞–Ω—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            if (isWaitingForAIResponse)
            {
                EditorGUILayout.HelpBox("AI –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç...", MessageType.Info);
            }
            
            GUILayout.EndArea();
        }
        
        // –ú–µ—Ç–æ–¥ SetExample –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π —ñ –∑–∞–º—ñ–Ω–µ–Ω–∏–π –Ω–∞ UserInputContainer
    }
    
    /// <summary>
    /// –ö–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –º—ñ–∂ –º–µ—Ç–æ–¥–∞–º–∏
    /// </summary>
    public class StringValue
    {
        public string Value { get; set; }
        
        public StringValue(string initialValue)
        {
            Value = initialValue;
        }
    }
}
