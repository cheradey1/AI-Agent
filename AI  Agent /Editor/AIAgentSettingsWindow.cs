// filepath: /home/a/–ú—É–∑–∏–∫–∞/AI Unity Agent/Editor/AIAgentSettingsWindow.cs
using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
using System.Text;

namespace UnityAIAgent
{
    /// <summary>
    /// –í—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è AI Agent - –º—ñ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó API –∫–ª—é—á—ñ–≤ —Ç–∞ –¥–∂–µ—Ä–µ–ª –∞—Å–µ—Ç—ñ–≤
    /// </summary>
    public partial class AIAgentSettingsWindow : EditorWindow
    {
        // Settings
        private AIAgentSettings _settings;
        private SerializedObject _serializedSettings;
        private Vector2 _scrollPosition;
        
        // URLs for documentation and support
        private const string DOCUMENTATION_URL = "https://github.com/your-organization/unity-ai-agent";
        private const string SUPPORT_URL = "https://github.com/your-organization/unity-ai-agent/issues";
        
        // API Keys
        private string _openAIKey = ""; 
        // –í–∏–¥–∞–ª–µ–Ω–æ _anthropicKey, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è _settings.anthropicApiKey –Ω–∞–ø—Ä—è–º—É
        
        // –ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –º–æ–¥–µ–ª–µ–π API
        private List<string> _cachedGeminiModels;
    private string _geminiModelUpdateStatus;
        
        // Asset Sources
        private List<AssetSource> _assetSources = new List<AssetSource>();
        private List<GithubSource> _githubSources = new List<GithubSource>();
        
        // Temp
        private string _newAssetSourceUrl = "https://assetstore.unity.com/";
        private string _newAssetSourceCategory = "3D Models";
        private string _newGithubRepoUrl = "https://github.com/Unity-Technologies/";
        private string _newGithubRepoDesc = "Unity official repositories";
        
        [MenuItem("Window/AI Assistant/Settings")]
        public static void ShowWindow()
        {
            GetWindow<AIAgentSettingsWindow>("AI Agent Settings");
        }
        
    private void OnEnable()
    {
        LoadSettings();
        LoadSources();
        
        // –Ø–∫—â–æ —î –≤–∞–ª—ñ–¥–Ω–∏–π –∫–ª—é—á Gemini, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π —É —Ñ–æ–Ω—ñ
        if (_settings != null && !string.IsNullOrEmpty(_settings.geminiApiKey) && _settings.geminiApiKey.Trim().Length >= 10)
        {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            EditorApplication.delayCall += () => FetchAvailableGeminiModels();
        }
    }
        
        private void LoadSettings()
        {
            _settings = AIAgentSettingsCreator.GetSettings(true);
            
            if (_settings != null)
            {
                _serializedSettings = new SerializedObject(_settings);
                _openAIKey = _settings.openAIApiKey;
                // –ü—Ä–∏–±—Ä–∞–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á–∞ Anthropic Claude —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ª–∏—à–µ –≤ —Å–µ–∫—Ü—ñ—ó Claude
                Debug.Log($"AIAgentSettingsWindow: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
            }
            else
            {
                Debug.LogError("AIAgentSettingsWindow: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
            }
        }
        
        private void LoadSources()
        {
            _assetSources = new List<AssetSource>();
            _githubSources = new List<GithubSource>();
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
            if (!_assetSources.Any(s => s.Url.Contains("assetstore.unity.com")))
            {
                _assetSources.Add(new AssetSource 
                { 
                    Name = "Unity Asset Store",
                    Url = "https://assetstore.unity.com/",
                    Category = "All",
                    IsFree = true
                });
                
                _assetSources.Add(new AssetSource 
                { 
                    Name = "Unity Free Assets",
                    Url = "https://assetstore.unity.com/free-assets",
                    Category = "Free",
                    IsFree = true
                });
            }
            
            if (!_githubSources.Any(s => s.Url.Contains("Unity-Technologies")))
            {
                _githubSources.Add(new GithubSource
                {
                    Name = "Unity Technologies",
                    Url = "https://github.com/Unity-Technologies/",
                    Description = "–û—Ñ—ñ—Ü—ñ–π–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó Unity"
                });
                
                _githubSources.Add(new GithubSource
                {
                    Name = "Unity Open Projects",
                    Url = "https://github.com/UnityTechnologies/open-project-1",
                    Description = "–í—ñ–¥–∫—Ä–∏—Ç—ñ –ø—Ä–æ–µ–∫—Ç–∏ Unity –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è"
                });
            }
            
            // TODO: –¢—É—Ç –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∂–µ—Ä–µ–ª —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
        }
        
        private void OnGUI()
        {
            if (_settings == null)
            {
                EditorGUILayout.HelpBox("AIAgentSettings –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...", MessageType.Warning);
                if (GUILayout.Button("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"))
                {
                    LoadSettings();
                }
                return;
            }
            
            _scrollPosition = EditorGUILayout.BeginScrollView(_scrollPosition);
            
            // API Keys section
            EditorGUILayout.Space(10);
            EditorGUILayout.BeginHorizontal();
            GUILayout.Label("üîë API –ö–ª—é—á—ñ", EditorStyles.boldLabel);
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(new GUIContent(" –Ü–Ω—Ñ–æ –ø—Ä–æ API –∫–ª—é—á—ñ", EditorGUIUtility.IconContent("_Help").image), GUILayout.Width(130)))
            {
                EditorUtility.DisplayDialog("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API –∫–ª—é—á—ñ", 
                    "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö AI –º–æ–¥–µ–ª–µ–π –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ API –∫–ª—é—á—ñ:\n\n" +
                    "1. OpenAI API: https://platform.openai.com\n" +
                    "   - –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏\n" +
                    "   - –ù–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å $5 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç—ñ–≤\n\n" +
                    "2. Google Gemini API: https://ai.google.dev/\n" +
                    "   - –î–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API –∫–ª—é—á\n" +
                    "   - –ú–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤\n\n" +
                    "3. Anthropic Claude API: https://console.anthropic.com\n" +
                    "   - –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏\n" +
                    "   - –ù–∞–¥–∞—î—Ç—å—Å—è –ø—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ –∫—Ä–µ–¥–∏—Ç–∞–º–∏\n\n" +
                    "4. Ollama: https://ollama.ai/\n" +
                    "   - –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –º–æ–¥–µ–ª–µ–π\n" +
                    "   - –ù–µ –ø–æ—Ç—Ä–µ–±—É—î API –∫–ª—é—á–∞, –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç\n" +
                    "   - –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost:11434", 
                "–ó—Ä–æ–∑—É–º—ñ–ª–æ");
            }
            EditorGUILayout.EndHorizontal();
            EditorGUILayout.BeginVertical("box");
            
            EditorGUILayout.LabelField("OpenAI API Key:");
            string newOpenAIKey = EditorGUILayout.PasswordField(_openAIKey);
            if (newOpenAIKey != _openAIKey)
            {
                _openAIKey = newOpenAIKey;
                _settings.openAIApiKey = _openAIKey;
                EditorUtility.SetDirty(_settings);
            }
            
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è API –∫–ª—é—á–∞ OpenAI
            if (GUILayout.Button("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–ª—é—á OpenAI", GUILayout.Width(150)))
            {
                _openAIKey = "";
                _settings.openAIApiKey = "";
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUILayout.Space(2);
            GUILayout.BeginHorizontal();
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(new GUIContent(" –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á OpenAI API", EditorGUIUtility.IconContent("BuildSettings.Web.Small").image), 
                GUILayout.Height(28), GUILayout.Width(220)))
            {
                Application.OpenURL("https://platform.openai.com");
            }
            GUILayout.FlexibleSpace();
            GUILayout.EndHorizontal();
            
            EditorGUILayout.HelpBox("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç OpenAI –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á–∞. –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏ –∑–º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—é—á —É —Ä–æ–∑–¥—ñ–ª—ñ 'API keys'.", MessageType.Info);
            
            EditorGUILayout.Space(5);
            // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Anthropic Claude —Ç–∞ Gemini –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è
            EditorGUILayout.HelpBox("–ö–ª—é—á—ñ –¥–ª—è Anthropic Claude —Ç–∞ Google Gemini –¥–æ—Å—Ç—É–ø–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª–∞—Ö –Ω–∏–∂—á–µ.", MessageType.Info);
            
            // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ OpenAI
            // OpenAI —Å–µ–∫—Ü—ñ—è
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("–ú–æ–¥–µ–ª—å OpenAI GPT:", EditorStyles.boldLabel);
            string[] availableOpenAIModels = new string[] {
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-16k",
                "gpt-4o",
                "gpt-4o-mini",
                "gpt-4.1",
                "gpt-4.1-mini"
            };
            
            int currentModelIndex = Array.IndexOf(availableOpenAIModels, _settings.modelName);
            if (currentModelIndex < 0) currentModelIndex = -1; // -1 –æ–∑–Ω–∞—á–∞—î "–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å"
            
            // –î–æ–¥–∞—î–º–æ –ø—É–Ω–∫—Ç "–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å" –¥–æ —Å–ø–∏—Å–∫—É
            string[] displayedOptions = new string[availableOpenAIModels.Length + 1];
            Array.Copy(availableOpenAIModels, 0, displayedOptions, 0, availableOpenAIModels.Length);
            displayedOptions[availableOpenAIModels.Length] = "–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å...";
            
            int displayIndex = currentModelIndex >= 0 ? currentModelIndex : availableOpenAIModels.Length;
            int newDisplayIndex = EditorGUILayout.Popup("–í–∏–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å OpenAI:", displayIndex, displayedOptions);
            
            // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–Ü–Ω—à–∞ –º–æ–¥–µ–ª—å", –ø–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ
            if (newDisplayIndex == availableOpenAIModels.Length)
            {
                _settings.modelName = EditorGUILayout.TextField("–ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ:", _settings.modelName);
                EditorGUILayout.HelpBox("–í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ OpenAI. –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", MessageType.Info);
                EditorUtility.SetDirty(_settings);
            }
            // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –º–æ–¥–µ–ª—å –∑—ñ —Å–ø–∏—Å–∫—É
            else if (newDisplayIndex != displayIndex)
            {
                _settings.modelName = availableOpenAIModels[newDisplayIndex];
                EditorUtility.SetDirty(_settings);
                Debug.Log($"–ó–º—ñ–Ω–µ–Ω–æ –º–æ–¥–µ–ª—å OpenAI –Ω–∞: {_settings.modelName}");
            }
            
            EditorGUILayout.Space(5);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á OpenAI"))
            {
                CheckOpenAIKey();
            }
            
            if (GUILayout.Button("–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ GPT"))
            {
                CheckGptModels();
            }
            GUILayout.EndHorizontal();
            
            // –°–µ–∫—Ü—ñ—è Google Gemini
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Google Gemini API", EditorStyles.boldLabel);
            
            bool newUseGemini = EditorGUILayout.Toggle("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Gemini API:", _settings.useGeminiAPI);
            if (newUseGemini != _settings.useGeminiAPI)
            {
                _settings.useGeminiAPI = newUseGemini;
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUI.BeginDisabledGroup(!_settings.useGeminiAPI);
            
            EditorGUILayout.LabelField("Gemini API Key:");
            string newGeminiKey = EditorGUILayout.PasswordField(_settings.geminiApiKey);
            if (newGeminiKey != _settings.geminiApiKey)
            {
                // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∫–æ—Ä–µ–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É API –∫–ª—é—á–∞
                _settings.geminiApiKey = APIKeyHelper.FixGeminiApiKey(newGeminiKey);
                EditorUtility.SetDirty(_settings);
            }
            
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è API –∫–ª—é—á–∞ Gemini
            if (GUILayout.Button("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–ª—é—á Gemini", GUILayout.Width(150)))
            {
                _settings.geminiApiKey = "";
                EditorUtility.SetDirty(_settings);
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω –∫–ª—é—á–∞ API
            if (!string.IsNullOrEmpty(_settings.geminiApiKey))
            {
                APIKeyHelper.ShowGeminiKeyStatus(_settings.geminiApiKey);
            }
            
            EditorGUILayout.Space(2);
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á", GUILayout.Height(24), GUILayout.Width(120)))
            {
                CheckGeminiKey();
            }
            if (string.IsNullOrEmpty(_settings.geminiApiKey))
            {
                EditorGUILayout.HelpBox("–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Google Gemini", MessageType.Info);
            }
            GUILayout.EndHorizontal();
            
            EditorGUILayout.Space(2);
            GUILayout.BeginHorizontal();
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(new GUIContent(" –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á Gemini API", EditorGUIUtility.IconContent("BuildSettings.Web.Small").image), 
                GUILayout.Height(28), GUILayout.Width(220)))
            {
                Application.OpenURL("https://makersuite.google.com/app/apikey");
            }
            
            if (GUILayout.Button(new GUIContent(" –î–æ–∫–ª–∞–¥–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫", EditorGUIUtility.IconContent("_Help").image), 
                GUILayout.Height(28), GUILayout.Width(160)))
            {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É –ø—Ä–æ–µ–∫—Ç—ñ
                string guidePath = AssetDatabase.GUIDToAssetPath(
                    AssetDatabase.FindAssets("GeminiApiGuide t:TextAsset").Length > 0 ? 
                    AssetDatabase.FindAssets("GeminiApiGuide t:TextAsset")[0] : "");
                
                if (!string.IsNullOrEmpty(guidePath))
                {
                    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª —É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ Unity
                    UnityEditorInternal.InternalEditorUtility.OpenFileAtLineExternal(guidePath, 1);
                }
                else
                {
                    // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫—É
                    Application.OpenURL("https://ai.google.dev/tutorials/setup");
                }
            }
            
            if (GUILayout.Button(new GUIContent(" –£—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º", EditorGUIUtility.IconContent("console.warnicon.sml").image), 
                GUILayout.Height(28), GUILayout.Width(160)))
            {
                // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ —É—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ API
                APITroubleshooterWindow.ShowWindow();
            }
            
            GUILayout.FlexibleSpace();
            GUILayout.EndHorizontal();
            
            EditorGUILayout.HelpBox("Google Gemini –ø—Ä–æ–ø–æ–Ω—É—î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API –∫–ª—é—á –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø–æ–º–∏–ª–∫–∏ –∑ –∫–ª—é—á–µ–º, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –¥–æ–∫–ª–∞–¥–Ω–∏–º –ø–æ—Å—ñ–±–Ω–∏–∫–æ–º.", MessageType.Info);
            
            // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—ñ Gemini
            Dictionary<string, string> geminiModelDescriptions = new Dictionary<string, string>()
            {
                { "gemini-pro", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É" },
                { "gemini-pro-vision", "–ú–æ–¥–µ–ª—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å" },
                { "gemini-1.5-pro", "–ù–æ–≤–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∞ –º–æ–¥–µ–ª—å (–±—ñ–ª—å—à –ø–æ—Ç—É–∂–Ω–∞, –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∞)" },
                { "gemini-1.5-flash", "–®–≤–∏–¥–∫–∞ –º–æ–¥–µ–ª—å –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é" },
                { "gemini-1.5-pro-latest", "–ù–∞–π–Ω–æ–≤—ñ—à–∞ –≤–µ—Ä—Å—ñ—è Gemini –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏" }
            };
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ –∑ –∫–µ—à—É –∞–±–æ –±–∞–∑–æ–≤—ñ, —è–∫—â–æ –∫–µ—à –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
            List<string> availableGeminiModels = new List<string>();
            if (_cachedGeminiModels != null && _cachedGeminiModels.Count > 0)
            {
                availableGeminiModels = _cachedGeminiModels;
            }
            else
            {
                availableGeminiModels = new List<string> { "gemini-pro", "gemini-pro-vision", "gemini-1.5-pro", "gemini-1.5-flash" };
            }
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –º—ñ—Ç–æ–∫ –¥–ª—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É
            string[] modelLabels = new string[availableGeminiModels.Count];
            for (int i = 0; i < availableGeminiModels.Count; i++)
            {
                string model = availableGeminiModels[i];
                string description = "–ú–æ–¥–µ–ª—å Gemini";
                
                // –®—É–∫–∞—î–º–æ –æ–ø–∏—Å —É —Å–ª–æ–≤–Ω–∏–∫—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π
                if (geminiModelDescriptions.ContainsKey(model))
                {
                    description = geminiModelDescriptions[model];
                }
                
                modelLabels[i] = $"{model} ({description})";
            }
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª—ñ
            int currentGeminiModel = availableGeminiModels.IndexOf(_settings.geminiModelName);
            if (currentGeminiModel < 0) currentGeminiModel = 0;
            
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫
            int newGeminiModel = EditorGUILayout.Popup("–ú–æ–¥–µ–ª—å Gemini:", currentGeminiModel, modelLabels);
            if (newGeminiModel != currentGeminiModel && newGeminiModel < availableGeminiModels.Count)
            {
                _settings.geminiModelName = availableGeminiModels[newGeminiModel];
                EditorUtility.SetDirty(_settings);
                Debug.Log($"–ó–º—ñ–Ω–µ–Ω–æ –º–æ–¥–µ–ª—å Gemini –Ω–∞: {_settings.geminiModelName}");
            }
            
            // –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("–û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", GUILayout.Width(150)))
            {
                FetchAvailableGeminiModels();
            }
            
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —î
            if (!string.IsNullOrEmpty(_geminiModelUpdateStatus))
            {
                EditorGUILayout.LabelField(_geminiModelUpdateStatus, EditorStyles.miniLabel);
            }
            EditorGUILayout.EndHorizontal();
            
            EditorGUI.EndDisabledGroup();
            
            // –°–µ–∫—Ü—ñ—è Anthropic Claude
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Anthropic Claude API", EditorStyles.boldLabel);
            
            bool newUseAnthropicClaude = EditorGUILayout.Toggle("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Claude API:", _settings.useAnthropicClaudeAPI);
            if (newUseAnthropicClaude != _settings.useAnthropicClaudeAPI) 
            {
                _settings.useAnthropicClaudeAPI = newUseAnthropicClaude;
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUI.BeginDisabledGroup(!_settings.useAnthropicClaudeAPI);
            
            EditorGUILayout.LabelField("Claude API Key:");
            string newClaudeKey = EditorGUILayout.PasswordField(_settings.anthropicApiKey);
            if (newClaudeKey != _settings.anthropicApiKey)
            {
                _settings.anthropicApiKey = newClaudeKey;
                EditorUtility.SetDirty(_settings);
            }
            
            // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è API –∫–ª—é—á–∞ Claude
            if (GUILayout.Button("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–ª—é—á Claude", GUILayout.Width(150)))
            {
                _settings.anthropicApiKey = "";
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUILayout.Space(2);
            GUILayout.BeginHorizontal();
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(new GUIContent(" –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á Claude API", EditorGUIUtility.IconContent("BuildSettings.Web.Small").image), 
                GUILayout.Height(28), GUILayout.Width(220)))
            {
                Application.OpenURL("https://console.anthropic.com");
            }
            GUILayout.FlexibleSpace();
            GUILayout.EndHorizontal();
            
            EditorGUILayout.HelpBox("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ —Å–∞–π—Ç—ñ Anthropic –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–Ω—Å–æ–ª—ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞. –£ —Ä–æ–∑–¥—ñ–ª—ñ 'API Keys' –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—é—á –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –º–æ–¥–µ–ª—è–º–∏ Claude.", MessageType.Info);
            
            string[] claudeModels = new string[] { 
                "claude-3-haiku-20240307",
                "claude-3-sonnet-20240229", 
                "claude-3-opus-20240229" 
            };
            int currentClaudeModel = Array.IndexOf(claudeModels, _settings.claudeModelName);
            if (currentClaudeModel < 0) currentClaudeModel = 0;
            
            int newClaudeModel = EditorGUILayout.Popup("–ú–æ–¥–µ–ª—å Claude:", currentClaudeModel, claudeModels);
            if (newClaudeModel != currentClaudeModel)
            {
                _settings.claudeModelName = claudeModels[newClaudeModel];
                EditorUtility.SetDirty(_settings);
                Debug.Log($"–ó–º—ñ–Ω–µ–Ω–æ –º–æ–¥–µ–ª—å Claude –Ω–∞: {_settings.claudeModelName}");
            }
            
            if (GUILayout.Button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á Claude"))
            {
                CheckAnthropicKey();
            }
            
            EditorGUI.EndDisabledGroup();
            
            // –°–µ–∫—Ü—ñ—è Ollama (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Ollama (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)", EditorStyles.boldLabel);
            
            bool newUseOllama = EditorGUILayout.Toggle("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Ollama:", _settings.useOllamaAPI);
            if (newUseOllama != _settings.useOllamaAPI)
            {
                _settings.useOllamaAPI = newUseOllama;
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUI.BeginDisabledGroup(!_settings.useOllamaAPI);
            
            EditorGUILayout.LabelField("Ollama API Endpoint:");
            string newOllamaEndpoint = EditorGUILayout.TextField(_settings.ollamaEndpoint);
            if (newOllamaEndpoint != _settings.ollamaEndpoint)
            {
                _settings.ollamaEndpoint = newOllamaEndpoint;
                EditorUtility.SetDirty(_settings);
            }
            
            EditorGUILayout.Space(2);
            GUILayout.BeginHorizontal();
            GUILayout.FlexibleSpace();
            if (GUILayout.Button(new GUIContent(" –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Ollama", EditorGUIUtility.IconContent("BuildSettings.Web.Small").image), 
                GUILayout.Height(28), GUILayout.Width(220)))
            {
                Application.OpenURL("https://ollama.ai/");
            }
            GUILayout.FlexibleSpace();
            GUILayout.EndHorizontal();
            
            EditorGUILayout.HelpBox("Ollama –¥–æ–∑–≤–æ–ª—è—î –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ LLM –º–æ–¥–µ–ª—ñ –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Ollama, –ø–æ—Ç—ñ–º –∑–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ —ñ –≤–∫–∞–∂—ñ—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (http://localhost:11434).", MessageType.Info);
            
            EditorGUILayout.LabelField("Ollama Model:");
            string newOllamaModel = EditorGUILayout.TextField(_settings.ollamaModelName);
            if (newOllamaModel != _settings.ollamaModelName)
            {
                _settings.ollamaModelName = newOllamaModel;
                EditorUtility.SetDirty(_settings);
            }
            
            GUILayout.BeginHorizontal();
            if (GUILayout.Button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ Ollama"))
            {
                CheckOllamaConnection();
            }
            
            if (GUILayout.Button("–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ"))
            {
                CheckOllamaModels();
            }
            GUILayout.EndHorizontal();
            
            EditorGUI.EndDisabledGroup();
            
            EditorGUILayout.EndVertical();
            
            // Asset Sources section
            EditorGUILayout.Space(20);
            GUILayout.Label("üõí –î–∂–µ—Ä–µ–ª–∞ –∞—Å–µ—Ç—ñ–≤", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical("box");
            
            // –Ü—Å–Ω—É—é—á—ñ –¥–∂–µ—Ä–µ–ª–∞
            for (int i = 0; i < _assetSources.Count; i++)
            {
                EditorGUILayout.BeginVertical("box");
                EditorGUILayout.BeginHorizontal();
                
                // –Ü–º'—è —Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                EditorGUILayout.LabelField(_assetSources[i].Name, EditorStyles.boldLabel);
                if (GUILayout.Button("‚úñ", GUILayout.Width(25)))
                {
                    _assetSources.RemoveAt(i);
                    i--;
                    continue;
                }
                
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.LabelField($"URL: {_assetSources[i].Url}");
                EditorGUILayout.LabelField($"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {_assetSources[i].Category}");
                EditorGUILayout.LabelField($"–¢—ñ–ª—å–∫–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ: {(_assetSources[i].IsFree ? "–¢–∞–∫" : "–ù—ñ")}");
                
                EditorGUILayout.EndVertical();
            }
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ –∞—Å–µ—Ç—ñ–≤:", EditorStyles.boldLabel);
            
            _newAssetSourceUrl = EditorGUILayout.TextField("URL:", _newAssetSourceUrl);
            _newAssetSourceCategory = EditorGUILayout.TextField("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", _newAssetSourceCategory);
            bool isFree = EditorGUILayout.Toggle("–¢—ñ–ª—å–∫–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ:", true);
            
            if (GUILayout.Button("–î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ –∞—Å–µ—Ç—ñ–≤"))
            {
                if (!string.IsNullOrEmpty(_newAssetSourceUrl))
                {
                    string name = Path.GetHost(_newAssetSourceUrl);
                    if (string.IsNullOrEmpty(name)) name = "–ù–æ–≤–µ –¥–∂–µ—Ä–µ–ª–æ";
                    
                    _assetSources.Add(new AssetSource
                    {
                        Name = name,
                        Url = _newAssetSourceUrl,
                        Category = _newAssetSourceCategory,
                        IsFree = isFree
                    });
                    
                    _newAssetSourceUrl = "https://assetstore.unity.com/";
                    _newAssetSourceCategory = "3D Models";
                }
            }
            
            EditorGUILayout.EndVertical();
            
            // GitHub Sources section
            EditorGUILayout.Space(20);
            GUILayout.Label("üìÇ –î–∂–µ—Ä–µ–ª–∞ GitHub", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical("box");
            
            // –Ü—Å–Ω—É—é—á—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
            for (int i = 0; i < _githubSources.Count; i++)
            {
                EditorGUILayout.BeginVertical("box");
                EditorGUILayout.BeginHorizontal();
                
                // –Ü–º'—è —Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                EditorGUILayout.LabelField(_githubSources[i].Name, EditorStyles.boldLabel);
                if (GUILayout.Button("‚úñ", GUILayout.Width(25)))
                {
                    _githubSources.RemoveAt(i);
                    i--;
                    continue;
                }
                
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.LabelField($"URL: {_githubSources[i].Url}");
                EditorGUILayout.LabelField($"–û–ø–∏—Å: {_githubSources[i].Description}");
                
                EditorGUILayout.EndVertical();
            }
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub:", EditorStyles.boldLabel);
            
            _newGithubRepoUrl = EditorGUILayout.TextField("URL:", _newGithubRepoUrl);
            _newGithubRepoDesc = EditorGUILayout.TextField("–û–ø–∏—Å:", _newGithubRepoDesc);
            
            if (GUILayout.Button("–î–æ–¥–∞—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub"))
            {
                if (!string.IsNullOrEmpty(_newGithubRepoUrl))
                {
                    string name = GetGithubRepoName(_newGithubRepoUrl);
                    if (string.IsNullOrEmpty(name)) name = "–ù–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π";
                    
                    _githubSources.Add(new GithubSource
                    {
                        Name = name,
                        Url = _newGithubRepoUrl,
                        Description = _newGithubRepoDesc
                    });
                    
                    _newGithubRepoUrl = "https://github.com/Unity-Technologies/";
                    _newGithubRepoDesc = "–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π Unity";
                }
            }
            
            EditorGUILayout.EndVertical();
            
            // Save Settings
            EditorGUILayout.Space(20);
            GUI.backgroundColor = Color.green;
            if (GUILayout.Button("–ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", GUILayout.Height(30)))
            {
                SaveSettings();
            }
            GUI.backgroundColor = Color.white;
            
            // –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
            EditorGUILayout.Space(20);
            GUILayout.Label("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical("box");
            
            EditorGUILayout.HelpBox("–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI Agent –∞–±–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∏–∂—á–µ.", MessageType.Info);
            
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button(new GUIContent(" –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è", EditorGUIUtility.IconContent("_Help").image), GUILayout.Height(30)))
            {
                Application.OpenURL(DOCUMENTATION_URL);
            }
            
            if (GUILayout.Button(new GUIContent(" –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É", EditorGUIUtility.IconContent("console.warnicon").image), GUILayout.Height(30)))
            {
                Application.OpenURL(SUPPORT_URL);
            }
            EditorGUILayout.EndHorizontal();
            
            EditorGUILayout.EndVertical();
            
            EditorGUILayout.EndScrollView();
        }
        
        private void SaveSettings()
        {
            if (_settings == null)
            {
                Debug.LogError("AIAgentSettingsWindow: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –æ–±'—î–∫—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ");
                return;
            }
            
            _settings.openAIApiKey = _openAIKey;
            // –ö–ª—é—á Anthropic Claude –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–ª—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ Claude API
            
            // TODO: –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ –∞—Å–µ—Ç—ñ–≤ —ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –≤ PlayerPrefs –∞–±–æ –æ–∫—Ä–µ–º–æ–º—É —Ñ–∞–π–ª—ñ
            
            EditorUtility.SetDirty(_settings);
            AssetDatabase.SaveAssets();
            
            Debug.Log("AIAgentSettingsWindow: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
        }
        
        private string GetGithubRepoName(string url)
        {
            if (string.IsNullOrEmpty(url)) return "";
            
            // –í–∏–æ–∫—Ä–µ–º–ª—é—î–º–æ —ñ–º'—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –∑ URL
            string[] parts = url.TrimEnd('/').Split('/');
            if (parts.Length >= 2)
            {
                return parts[parts.Length - 1];
            }
            
            return "";
        }
        
        /// <summary>
        /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ GPT –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ API –∫–ª—é—á–∞
        /// </summary>
        private async void CheckGptModels()
        {
            if (string.IsNullOrEmpty(_openAIKey))
            {
                EditorUtility.DisplayDialog("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á OpenAI –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –º–æ–¥–µ–ª–µ–π.", "OK");
                return;
            }
            
            try
            {
                EditorUtility.DisplayProgressBar("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π", "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π OpenAI...", 0.5f);
                
                var openAiService = new OpenAIService(_settings);
                var availableModels = await openAiService.CheckAvailableModels();
                
                EditorUtility.ClearProgressBar();
                
                if (availableModels.Count > 0)
                {
                    // –ì—Ä—É–ø—É—î–º–æ –º–æ–¥–µ–ª—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    var gpt4o = availableModels.Where(m => m.StartsWith("gpt-4o")).OrderBy(m => m).ToList();
                    var gpt41 = availableModels.Where(m => m.StartsWith("gpt-4.1")).OrderBy(m => m).ToList();
                    var gpt35 = availableModels.Where(m => m.StartsWith("gpt-3.5")).OrderBy(m => m).ToList();
                    var otherModels = availableModels.Where(m => 
                        !m.StartsWith("gpt-4o") && 
                        !m.StartsWith("gpt-4.1") && 
                        !m.StartsWith("gpt-3.5")).OrderBy(m => m).ToList();
                    
                    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –º–æ–¥–µ–ª—å
                    string recommendedModel = "";
                    if (gpt4o.Count > 0) recommendedModel = gpt4o[0];
                    else if (gpt41.Count > 0) recommendedModel = gpt41[0];
                    else if (gpt35.Count > 0) recommendedModel = gpt35[0];
                    
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("–î–ª—è –≤–∞—à–æ–≥–æ API –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ:");
                    
                    // –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –º–æ–¥–µ–ª—å —è–∫—â–æ –≤–æ–Ω–∞ —î
                    if (!string.IsNullOrEmpty(recommendedModel))
                    {
                        sb.AppendLine($"\nüåü –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {recommendedModel}");
                    }
                    
                    // –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø–∏ –º–æ–¥–µ–ª–µ–π
                    if (gpt4o.Count > 0)
                    {
                        sb.AppendLine("\nüìä GPT-4o –º–æ–¥–µ–ª—ñ:");
                        gpt4o.ForEach(m => sb.AppendLine($"  ‚Ä¢ {m}"));
                    }
                    
                    if (gpt41.Count > 0)
                    {
                        sb.AppendLine("\nüìä GPT-4.1 –º–æ–¥–µ–ª—ñ:");
                        gpt41.ForEach(m => sb.AppendLine($"  ‚Ä¢ {m}"));
                    }
                    
                    if (gpt35.Count > 0)
                    {
                        sb.AppendLine("\nüìä GPT-3.5 –º–æ–¥–µ–ª—ñ:");
                        gpt35.ForEach(m => sb.AppendLine($"  ‚Ä¢ {m}"));
                    }
                    
                    if (otherModels.Count > 0)
                    {
                        sb.AppendLine("\nüìä –Ü–Ω—à—ñ –º–æ–¥–µ–ª—ñ:");
                        otherModels.ForEach(m => sb.AppendLine($"  ‚Ä¢ {m}"));
                    }
                    
                    sb.AppendLine($"\n–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: {_settings.modelName}");
                    
                    // –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    if (!availableModels.Contains(_settings.modelName) && !string.IsNullOrEmpty(recommendedModel))
                    {
                        sb.AppendLine($"\n‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–æ–≥–æ API –∫–ª—é—á–∞!");
                        sb.AppendLine($"–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å –Ω–∞ {recommendedModel}");
                    }
                    
                    EditorUtility.DisplayDialog("–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ GPT", sb.ToString(), "–ó–∞–∫—Ä–∏—Ç–∏");
                    
                    // –ó–∞–ø–∏—Å—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ —É –ª–æ–≥
                    Debug.Log($"–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ GPT:\n{string.Join("\n", availableModels.OrderBy(m => m))}");
                }
                else
                {
                    EditorUtility.DisplayDialog("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", 
                        "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞ –∞–±–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.", "OK");
                }
            }
            catch (Exception ex)
            {
                EditorUtility.ClearProgressBar();
                EditorUtility.DisplayDialog("–ü–æ–º–∏–ª–∫–∞", $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π: {ex.Message}", "OK");
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π: {ex.Message}");
            }
        }
    }
    
    /// <summary>
    /// –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ –∞—Å–µ—Ç—ñ–≤
    /// </summary>
    [System.Serializable]
    public class AssetSource
    {
        public string Name;
        public string Url;
        public string Category;
        public bool IsFree;
    }
    
    /// <summary>
    /// –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
    /// </summary>
    [System.Serializable]
    public class GithubSource
    {
        public string Name;
        public string Url;
        public string Description;
    }
    
    /// <summary>
    /// –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ URL
    /// </summary>
    public static class Path
    {
        public static string GetHost(string url)
        {
            if (string.IsNullOrEmpty(url))
                return "";
            
            try
            {
                Uri uri = new Uri(url);
                return uri.Host;
            }
            catch
            {
                return "";
            }
        }
    }
}
