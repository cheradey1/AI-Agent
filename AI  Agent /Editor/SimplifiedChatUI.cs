using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using System;

namespace UnityAIAgent
{
    /// <summary>
    /// –ù–æ–≤–∏–π —Å–ø—Ä–æ—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AIAgentUnity
    /// </summary>
    public static class SimplifiedChatUI
    {
        // –í—ñ–¥—Å—Ç—É–ø–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        private const float PADDING = 10f;
        private const float BUTTON_HEIGHT = 30f;
        private const float SPECIAL_BUTTON_HEIGHT = 40f;
        
        /// <summary>
        /// –ú–∞–ª—é—î —Å–ø—Ä–æ—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (–∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏)
        /// </summary>
        public static void DrawSimplifiedChatInterface(
            Rect windowRect,
            ref string userInput, 
            ref Vector2 chatScrollPosition, 
            ref List<ChatMessage> chatHistory, 
            ref bool isWaitingForAIResponse, 
            bool isTextToSpeechEnabled,
            System.Action<string, bool> sendMessageAction, 
            System.Action clearChatAction,
            System.Action openSettingsAction,
            System.Action<string> saveMessageAction = null,
            bool showAPITroubleshooterButton = false)
        {
            // –î–æ–¥–∞—î–º–æ –ª–æ–≥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            if (openSettingsAction == null)
                Debug.LogWarning("SimplifiedChatUI: openSettingsAction is null");
            
            if (clearChatAction == null)
                Debug.LogWarning("SimplifiedChatUI: clearChatAction is null");
                
            if (saveMessageAction == null)
                Debug.Log("SimplifiedChatUI: saveMessageAction is null (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞)");
            
            bool verticalStarted = false;
            bool horizontalStarted = false;
            
            try
            {
                // –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å
                EditorGUILayout.BeginVertical();
                verticalStarted = true;
                
                // –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                DrawTopButtonsPanel(openSettingsAction, clearChatAction);
                
                // –ü–∞–Ω–µ–ª—å —á–∞—Ç—É (–∑–∞–π–º–∞—î –±—ñ–ª—å—à—É —á–∞—Å—Ç–∏–Ω—É –≤—ñ–∫–Ω–∞)
                DrawChatHistoryPanel(ref chatScrollPosition, chatHistory, saveMessageAction);
                
                // –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                DrawInputPanel(ref userInput, isWaitingForAIResponse, sendMessageAction);
                
                // –°—Ç–∞—Ç—É—Å–Ω–∏–π —Ä—è–¥–æ–∫ (—è–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)
                if (isWaitingForAIResponse)
                {
                    EditorGUILayout.BeginHorizontal();
                    horizontalStarted = true;
                    
                    ProgressIndicator.DrawSpinner(20f);
                    ProgressIndicator.DrawTextProgress("AI –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç");
                    
                    EditorGUILayout.EndHorizontal();
                    horizontalStarted = false;
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {ex.Message}\n{ex.StackTrace}");
                EditorGUILayout.HelpBox($"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {ex.Message}", MessageType.Error);
            }
            finally
            {
                // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –≤—Å—ñ –≥—Ä—É–ø–∏ –∑–∞–∫—Ä–∏—Ç—ñ –Ω–∞–≤—ñ—Ç—å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–æ–∫
                if (horizontalStarted)
                {
                    try { EditorGUILayout.EndHorizontal(); } catch (Exception) { }
                }
                
                if (verticalStarted)
                {
                    try { EditorGUILayout.EndVertical(); } catch (Exception) { }
                }
            }
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î –≤–µ—Ä—Ö–Ω—é –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        /// </summary>
        private static void DrawTopButtonsPanel(System.Action openSettingsAction, System.Action clearChatAction = null)
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
            
            // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
            if (clearChatAction != null)
            {
                if (GUILayout.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç", EditorStyles.toolbarButton, GUILayout.Width(120)))
                {
                    try
                    {
                        if (EditorUtility.DisplayDialog("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É?", 
                            "–¢–∞–∫", "–°–∫–∞—Å—É–≤–∞—Ç–∏"))
                        {
                            clearChatAction.Invoke();
                        }
                    }
                    catch (System.Exception ex)
                    {
                        Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —á–∞—Ç—É: {ex.Message}");
                    }
                }
            }
            
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (API/settings)
            if (openSettingsAction != null)
            {
                if (GUILayout.Button(new GUIContent("‚öôÔ∏è", "–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API/AI Agent"), EditorStyles.toolbarButton, GUILayout.Width(32)))
                {
                    openSettingsAction.Invoke();
                }
            }

            GUILayout.FlexibleSpace();
            
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∏–∂–Ω—è –∫–Ω–æ–ø–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
            
            EditorGUILayout.EndHorizontal();
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É
        /// </summary>
        private static void DrawChatHistoryPanel(ref Vector2 scrollPosition, List<ChatMessage> chatHistory, System.Action<string> saveMessageAction = null)
        {
            // –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É
            bool shouldScrollToBottom = false;
            float viewHeight = 0;
            float scrollViewHeight = 0;
            bool scrollViewStarted = false;
            bool verticalStarted = false;
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            float previousScrollY = scrollPosition.y;
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞—Ç–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (Event.current.type == EventType.Layout)
            {
                // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫—ñ–Ω—Ü—ñ —Å–∫—Ä–æ–ª—É
                shouldScrollToBottom = (scrollPosition.y >= viewHeight - scrollViewHeight - 50) || 
                                       (scrollViewHeight <= viewHeight);
            }
            
            try
            {
                scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.ExpandHeight(true));
                scrollViewStarted = true;
                
                EditorGUILayout.BeginVertical("box");
                verticalStarted = true;
            
            foreach (var message in chatHistory)
            {
                GUIStyle messageStyle = new GUIStyle(EditorStyles.wordWrappedLabel);
                messageStyle.richText = true;
                messageStyle.margin = new RectOffset(5, 5, 5, 5);
                
                string prefix;
                
                if (message.Sender.ToLower() == "user")
                {
                    GUI.backgroundColor = new Color(0.8f, 0.9f, 1f); // –°–≤—ñ—Ç–ª–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    prefix = "<b>üë§ –í–∏:</b> ";
                }
                else if (message.Sender.ToLower() == "ai" || message.Sender.ToLower() == "assistant")
                {
                    GUI.backgroundColor = new Color(0.9f, 1f, 0.9f); // –°–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è AI
                    prefix = "<b>ü§ñ AI:</b> ";
                }
                else
                {
                    GUI.backgroundColor = new Color(0.95f, 0.95f, 0.95f); // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    prefix = "<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b> ";
                }
                
                EditorGUILayout.BeginVertical("box");
                
                // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é –∫–æ–¥—É, —è–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è AI
                string displayText = message.Text;
                if (message.Sender.ToLower() == "ai" || message.Sender.ToLower() == "assistant")
                {
                    displayText = FormatMessageWithCodeHighlighting(message.Text);
                }
                
                EditorGUILayout.LabelField(prefix + displayText, messageStyle);
                
                // –ö–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if (saveMessageAction != null)
                {
                    DrawMessageContextButtons(message, saveMessageAction);
                }
                else if (message.Sender.ToLower() == "ai" || message.Sender.ToLower() == "assistant")
                {
                    // –Ø–∫—â–æ saveMessageAction == null, –∞–ª–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ AI, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
                    EditorGUILayout.BeginHorizontal();
                    GUILayout.FlexibleSpace();
                    
                    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
                    if (GUILayout.Button(new GUIContent("üìã", "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç"), 
                        GUILayout.Width(25), GUILayout.Height(20)))
                    {
                        EditorGUIUtility.systemCopyBuffer = message.Text;
                        Debug.Log("–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É");
                    }
                    
                    EditorGUILayout.EndHorizontal();
                    
                    // –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫—É API, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
                    if (message.Text.Contains("–ü–æ–º–∏–ª–∫–∞:") && (
                        message.Text.Contains("API key") || 
                        message.Text.Contains("API_KEY") ||
                        message.Text.Contains("–∫–ª—é—á") ||
                        message.Text.Contains("quota") ||
                        message.Text.Contains("–¥–æ—Å—Ç—É–ø")))
                    {
                        EditorGUILayout.Space(5);
                        EditorGUILayout.BeginHorizontal();
                        GUILayout.FlexibleSpace();
                        
                        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞ —É—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
                        GUI.backgroundColor = new Color(1f, 0.8f, 0.2f); // –û—Ä–∞–Ω–∂–µ–≤–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
                        if (GUILayout.Button("üõ†Ô∏è –£—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ API", GUILayout.Height(24)))
                        {
                            APITroubleshooterWindow.ShowWindow();
                        }
                        GUI.backgroundColor = Color.white;
                        
                        GUILayout.FlexibleSpace();
                        EditorGUILayout.EndHorizontal();
                    }
                }
                
                EditorGUILayout.EndVertical();
                
                GUI.backgroundColor = Color.white; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–ª—ñ—Ä
            }
            
            }
            catch (Exception ex)
            {
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É: {ex.Message}\n{ex.StackTrace}");
            }
            finally
            {
                // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—ó –≥—Ä—É–ø–∏
                if (verticalStarted)
                {
                    try { EditorGUILayout.EndVertical(); } catch { }
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É
                if (Event.current.type == EventType.Repaint)
                {
                    Rect lastRect = GUILayoutUtility.GetLastRect();
                    viewHeight = lastRect.height;
                    scrollViewHeight = EditorGUIUtility.currentViewWidth; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É —à–∏—Ä–∏–Ω—É —è–∫ –ø—Ä–∏–±–ª–∏–∑–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                    
                    // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –ø—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if (shouldScrollToBottom || chatHistory.Count <= 1)
                    {
                        scrollPosition.y = viewHeight;
                    }
                }
                
                // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                if (scrollViewStarted)
                {
                    try { EditorGUILayout.EndScrollView(); } catch { }
                }
            }
        }
        
        /// <summary>
        /// –ú–∞–ª—é—î –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        /// </summary>
        private static void DrawInputPanel(ref string userInput, bool isWaitingForAIResponse, System.Action<string, bool> sendMessageAction)
        {
            bool horizontalStarted = false;
            bool disabledGroupStarted = false;
            
            try
            {
                EditorGUILayout.BeginHorizontal();
                horizontalStarted = true;
                
                // –ö–Ω–æ–ø–∫–∞ "–ì–æ–ª–æ—Å–æ–≤–∏–π —á–∞—Ç" –∑–ª—ñ–≤–∞ –≤—ñ–¥ –ø–æ–ª—è –≤–≤–æ–¥—É
                GUIStyle voiceButtonStyle = new GUIStyle(GUI.skin.button);
                voiceButtonStyle.fontSize = 12;
                voiceButtonStyle.alignment = TextAnchor.MiddleCenter;
                
                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ AIAgentUnity –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º
                UnityAIAgent.AIAgentUnity aiAgent = EditorWindow.GetWindow<UnityAIAgent.AIAgentUnity>("AI Agent");
                bool isSpeechActive = aiAgent != null ? aiAgent.IsSpeechToTextActive : false;
                
                // –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä —ñ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
                Color buttonColor;
                GUIStyle recordingStyle = new GUIStyle(voiceButtonStyle);
                
                if (isSpeechActive) {
                    // –ü—É–ª—å—Å—É—é—á–∏–π –µ—Ñ–µ–∫—Ç –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Å—É
                    float pulseValue = Mathf.PingPong((float)EditorApplication.timeSinceStartup * 2.5f, 1f);
                    buttonColor = Color.Lerp(Color.red, new Color(1f, 0.5f, 0.5f), pulseValue);
                    
                    // –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–æ–¥–∞—î–º–æ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç —ñ —á—ñ—Ç–∫—ñ—à—É –∞–Ω—ñ–º–∞—Ü—ñ—é
                    recordingStyle.fontStyle = FontStyle.Bold;
                    GUI.backgroundColor = Color.Lerp(new Color(1f, 0.8f, 0.8f), new Color(1f, 0.4f, 0.4f), pulseValue);
                } else {
                    // –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ–ª—ñ—Ä –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
                    buttonColor = EditorGUIUtility.isProSkin ? new Color(0.2f, 0.6f, 1f) : new Color(0.1f, 0.5f, 0.9f);
                }
                
                recordingStyle.normal.textColor = buttonColor;
                
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
                voiceButtonStyle = recordingStyle;
                
                // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ü—ñ—ó –∑–∞–ø–∏—Å—É
                string buttonText;
                if (isSpeechActive)
                {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–ø–∏—Å –∑ AI Agent
                    float recordingStartTime = aiAgent != null ? aiAgent.RecordingStartTime : (float)EditorApplication.timeSinceStartup;
                    float recordingDuration = (float)EditorApplication.timeSinceStartup - recordingStartTime;
                    
                    // –ê–Ω—ñ–º–∞—Ü—ñ—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
                    float time = (float)(EditorApplication.timeSinceStartup % 1.0);
                    string animDots = time < 0.25f ? "‚Ä¢" : (time < 0.5f ? "‚Ä¢‚Ä¢" : (time < 0.75f ? "‚Ä¢‚Ä¢‚Ä¢" : ""));
                    
                    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –∑–∞–ø–∏—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    int maxRecordTime = 10; // –ú–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ñ MAX_RECORDING_TIME_SEC –≤ AIAgentUnity
                    
                    // –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—É
                    int progressPercentage = (int)Mathf.Min(100, (recordingDuration / maxRecordTime) * 100);
                    
                    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É
                    int seconds = (int)recordingDuration;
                    int remainingTime = maxRecordTime - seconds;
                    
                    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—É
                    string progressBar = "";
                    for (int i = 0; i < 10; i++) {
                        if (i < progressPercentage / 10) {
                            progressBar += "‚óº";
                        } else {
                            progressBar += "‚óª";
                        }
                    }
                    
                    buttonText = $"‚óâ {seconds}—Å\n{progressBar}";
                    
                    // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    EditorApplication.QueuePlayerLoopUpdate();
                    if (aiAgent != null)
                        aiAgent.Repaint();
                }
                else
                {
                    buttonText = "üé§"; // –õ–∏—à–µ —ñ–∫–æ–Ω–∫–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
                }
                
                if (GUILayout.Button(buttonText, voiceButtonStyle, GUILayout.Width(50), GUILayout.Height(isSpeechActive ? 50 : 40)))
                {
                    // –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞–Ω —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
                    if (aiAgent != null)
                    {
                        bool newState = !isSpeechActive;
                        aiAgent.IsSpeechToTextActive = newState;
                        
                        if (newState)
                        {
                            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ ConvertSpeechToText –Ω–∞–ø—Ä—è–º—É
                            aiAgent.ConvertSpeechToText();
                        }
                        else
                        {
                            // –Ø–∫—â–æ –≤–∏–º–∏–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å, –¥–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                            aiAgent.AddSystemMessage("‚èπÔ∏è –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º");
                        }
                    }
                }
                
                // –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É
                GUIStyle textAreaStyle = new GUIStyle(EditorStyles.textArea);
                textAreaStyle.fontSize = 14; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
                textAreaStyle.normal.textColor = EditorGUIUtility.isProSkin ? Color.white : Color.black;
                
                GUI.SetNextControlName("UserInputTextField");
                string newInput = EditorGUILayout.TextArea(userInput, textAreaStyle, GUILayout.Height(40));
                if (newInput != userInput)
                {
                    userInput = newInput;
                }
                     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ Enter
            bool enterPressed = false;
            if (Event.current.type == EventType.KeyDown && 
                Event.current.keyCode == KeyCode.Return && 
                !Event.current.shift && 
                GUI.GetNameOfFocusedControl() == "UserInputTextField")
            {
                enterPressed = true;
                Event.current.Use(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–¥—ñ—ó —ñ–Ω—à–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
            }
                
                // –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                EditorGUI.BeginDisabledGroup(isWaitingForAIResponse || string.IsNullOrWhiteSpace(userInput));
                disabledGroupStarted = true;
                
                if ((GUILayout.Button("‚û§", GUILayout.Width(50), GUILayout.Height(40)) || enterPressed) && 
                    !string.IsNullOrEmpty(userInput))
                {
                    try
                    {
                        if (sendMessageAction != null)
                        {
                            sendMessageAction.Invoke(userInput, false);
                            userInput = "";
                            
                            // –°—Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                            EditorGUI.FocusTextInControl("UserInputTextField");
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ø–∞–Ω–µ–ª—ñ –≤–≤–æ–¥—É: {ex.Message}\n{ex.StackTrace}");
            }
            finally
            {
                // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø –Ω–∞–≤—ñ—Ç—å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
                if (disabledGroupStarted)
                {
                    try { EditorGUI.EndDisabledGroup(); } catch { }
                }
                
                if (horizontalStarted)
                {
                    try { EditorGUILayout.EndHorizontal(); } catch { }
                }
            }
        }
        
        // –ú–µ—Ç–æ–¥ DrawActionButtonsPanel –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –¥—ñ—ó —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–∏ –≤ —á–∞—Ç—ñ
        
        /// <summary>
        /// –ú–∞–ª—é—î –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        /// </summary>
        private static void DrawMessageContextButtons(ChatMessage message, System.Action<string> saveMessageAction)
        {
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ AI
            if (message.Sender.ToLower() != "ai" && message.Sender.ToLower() != "assistant")
                return;
                
            EditorGUILayout.BeginHorizontal();
            
            GUILayout.FlexibleSpace(); // –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–æ—Ä—É—á
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
            if (saveMessageAction != null && GUILayout.Button(new GUIContent("üíæ", "–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–∞–π–ª"), 
                GUILayout.Width(25), GUILayout.Height(20)))
            {
                saveMessageAction.Invoke(message.Text);
            }
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
            if (GUILayout.Button(new GUIContent("üìã", "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç"), 
                GUILayout.Width(25), GUILayout.Height(20)))
            {
                EditorGUIUtility.systemCopyBuffer = message.Text;
                // –ü–æ–∫–∞–∂–µ–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø—ñ–¥–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å (–∑–∞–º—ñ—Å—Ç—å —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                Debug.Log("–¢–µ–∫—Å—Ç —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É");
            }
            
            EditorGUILayout.EndHorizontal();
        }
        
        /// <summary>
        /// –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—ñ–¥—Å–≤—ñ—á—É—é—á–∏ –±–ª–æ–∫–∏ –∫–æ–¥—É —ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        /// </summary>
        private static string FormatMessageWithCodeHighlighting(string message)
        {
            if (string.IsNullOrEmpty(message))
                return message;
                
            // –®—É–∫–∞—î–º–æ –±–ª–æ–∫–∏ –∫–æ–¥—É –∑ –ø–æ—Ç—Ä—ñ–π–Ω–∏–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–∏–º–∏ –ª–∞–ø–∫–∞–º–∏
            System.Text.RegularExpressions.Regex codeBlockRegex = 
                new System.Text.RegularExpressions.Regex(@"```(.*?)\r?\n([\s\S]*?)\r?\n```");
            
            string result = codeBlockRegex.Replace(message, match =>
            {
                string language = match.Groups[1].Value.Trim();
                string code = match.Groups[2].Value;
                
                // –§–æ—Ä–º–∞—Ç—É—î–º–æ –±–ª–æ–∫ –∫–æ–¥—É –∑—ñ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—î—é
                return $"\n<color=#269926><b>// –ö–æ–¥ {language}</b></color>\n<color=#0077CC><i>{code}</i></color>\n";
            });
            
            // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ #command:value
            System.Text.RegularExpressions.Regex commandRegex = 
                new System.Text.RegularExpressions.Regex(@"#(\w+):(\w+)");
                
            result = commandRegex.Replace(result, match =>
            {
                return $"<color=#CC5500><b>#{match.Groups[1].Value}:{match.Groups[2].Value}</b></color>";
            });
            
            return result;
        }
    }
}
